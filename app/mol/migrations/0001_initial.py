# Generated by Django 5.1.11 on 2025-08-14 19:27

import django.utils.timezone
import mol.utils
import mol.validators
import storages.backends.ftp
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.CharField(default=mol.utils.generate_uuid, editable=False, max_length=40, primary_key=True, serialize=False, verbose_name='GUID блога')),
                ('title', models.CharField(help_text='Заголовок', max_length=500, verbose_name='Заголовок')),
                ('subject', models.CharField(help_text='Блог/новости', max_length=100, verbose_name='Блог/новости')),
                ('category', models.CharField(help_text='Бизнес, продукт', max_length=250, verbose_name='Бизнес, продукт')),
                ('image', models.ImageField(blank=True, help_text='Изображение', null=True, storage=storages.backends.ftp.FTPStorage(location='ftps://vladanak:vladanak@5.35.90.116:21/'), upload_to='media/blogs/', verbose_name='Изображение')),
                ('text', models.TextField(help_text='Текст', verbose_name='Текст')),
            ],
            options={
                'verbose_name': 'Блоги',
                'verbose_name_plural': 'Блог',
            },
        ),
        migrations.CreateModel(
            name='Mail',
            fields=[
                ('id', models.CharField(default=mol.utils.generate_uuid, editable=False, max_length=40, primary_key=True, serialize=False, verbose_name='GUID рассылки')),
                ('email', mol.utils.LowercaseEmailField(error_messages={'unique': 'Значение почты должно быть уникальным.'}, max_length=254, unique=True, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'Подписки на рассылку',
                'verbose_name_plural': 'Подписка на рассылку',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.CharField(default=mol.utils.generate_uuid, editable=False, max_length=40, primary_key=True, serialize=False, verbose_name='GUID проекта')),
                ('title', models.CharField(help_text='Заголовок', max_length=500, verbose_name='Заголовок')),
                ('image', models.ImageField(blank=True, help_text='Изображение', null=True, storage=storages.backends.ftp.FTPStorage(location='ftps://vladanak:vladanak@5.35.90.116:21/'), upload_to='media/projects/', verbose_name='Изображение')),
                ('text', models.TextField(help_text='Текст', verbose_name='Текст')),
            ],
            options={
                'verbose_name': 'Проекты',
                'verbose_name_plural': 'Проект',
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(default=mol.utils.generate_uuid, editable=False, max_length=40, primary_key=True, serialize=False, verbose_name='GUID аккаунта')),
                ('first_name', models.CharField(help_text='Имя', max_length=50, validators=[mol.validators.validate_name], verbose_name='Имя')),
                ('last_name', models.CharField(help_text='Фамилия', max_length=50, validators=[mol.validators.validate_name], verbose_name='Фамилия')),
                ('middleName', models.CharField(blank=True, help_text='Отчество', max_length=50, null=True, validators=[mol.validators.validate_name], verbose_name='Отчество')),
                ('login', models.CharField(db_index=True, error_messages={'unique': 'Значение логина должно быть уникальным.'}, max_length=30, unique=True, validators=[mol.validators.validate_login], verbose_name='Логин')),
                ('email', mol.utils.LowercaseEmailField(error_messages={'unique': 'Значение почты должно быть уникальным.'}, max_length=254, unique=True, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=13, null=True, validators=[mol.validators.validate_phone], verbose_name='Телефон')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('login',),
            },
        ),
    ]
